# 1 "admsva/ekv.va"













# 21 "admsva/ekv.va"







# 1 "constants.h"







# 10 "constants.h"

  














  
  
  

  

  

  

  

  

  


# 29 "admsva/ekv.va"
# 1 "discipline.h"






# 9 "discipline.h"




discipline logic
  domain discrete;
enddiscipline






nature Current
  units = "A";
  access = I;
  idt_nature = Charge;
# 29 "discipline.h"
  abstol = 1e-12;

endnature

nature Charge
  units = "coul";
  access = Q;
  ddt_nature = Current;
# 40 "discipline.h"
  abstol = 1e-14;

endnature

nature Voltage
  units = "V";
  access = V;
  idt_nature = Flux;
# 51 "discipline.h"
  abstol = 1e-6;

endnature

nature Flux
  units = "Wb";
  access = Phi;
  ddt_nature = Voltage;
# 62 "discipline.h"
  abstol = 1e-9;

endnature

discipline electrical
  potential Voltage;
  flow Current;
enddiscipline

discipline voltage
  potential Voltage;
enddiscipline
discipline current
  potential Current;
enddiscipline


nature Magneto_Motive_Force
  units = "A*turn";
  access = MMF;
# 85 "discipline.h"
  abstol = 1e-12;

endnature

discipline magnetic
  potential Magneto_Motive_Force;
  flow Flux;
enddiscipline


nature Temperature
  units = "K";
  access = Temp;
# 101 "discipline.h"
  abstol = 1e-4;

endnature

nature Power
  units = "W";
  access = Pwr;
# 111 "discipline.h"
  abstol = 1e-9;

endnature

discipline thermal
  potential Temperature;
  flow Power;
enddiscipline


nature Position
  units = "m";
  access = Pos;
  ddt_nature = Velocity;
# 128 "discipline.h"
  abstol = 1e-6;

endnature

nature Velocity
  units = "m/s";
  access = Vel;
  ddt_nature = Acceleration;
  idt_nature = Position;
# 140 "discipline.h"
  abstol = 1e-6;

endnature

nature Acceleration
  units = "m/s^2";
  access = Acc;
  ddt_nature = Impulse;
  idt_nature = Velocity;
# 152 "discipline.h"
  abstol = 1e-6;

endnature

nature Impulse
  units = "m/s^3";
  access = Imp;
  idt_nature = Acceleration;
# 163 "discipline.h"
  abstol = 1e-6;

endnature

nature Force
  units = "N";
  access = F;
# 173 "discipline.h"
  abstol = 1e-6;

endnature

discipline kinematic
  potential Position;
  flow Force;
enddiscipline
discipline kinematic_v
  potential Velocity;
  flow Force;
enddiscipline


nature Angle
  units = "rads";
  access = Theta;
  ddt_nature = Angular_Velocity;
# 194 "discipline.h"
  abstol = 1e-6;

endnature

nature Angular_Velocity
  units = "rads/s";
  access = Omega;
  ddt_nature = Angular_Acceleration;
  idt_nature = Angle;
# 206 "discipline.h"
  abstol = 1e-6;

endnature

nature Angular_Acceleration
  units = "rads/s^2";
  access = Alpha;
  idt_nature = Angular_Velocity;
# 217 "discipline.h"
  abstol = 1e-6;

endnature

nature Angular_Force
  units = "N*m";
  access = Tau;
# 227 "discipline.h"
  abstol = 1e-6;

endnature

discipline rotational
  potential Angle;
  flow Angular_Force;
enddiscipline
discipline rotational_omega
  potential Angular_Velocity;
  flow Angular_Force;
enddiscipline

# 30 "admsva/ekv.va"







































module ekv (d,g,s,b);

   

   inout d,g,s,b;
   electrical d,g,s,b,di,si;

   
   
   parameter integer nmos=1 from [0:1]  (*info="MOS type : nmos:0"*);
   parameter integer pmos=1 from [0:1]  (*info="MOS type : pmos:0"*);
   parameter integer MTYPE=(nmos==0 ? (pmos==0 ? 0 : 1) : (pmos==0 ? -1 : 1));
   parameter real TNOM=27 from (-273.15:inf) 
                   (*info="Nominal temperature [degC]"*);
   parameter real IMAX=1 from (0:inf) 
                   (*info="Maximum forward junction current before linearization [A]"*);
   
   
   parameter real TOX=0 from [0:inf) 
                   (*info="Oxide thickness [m]"*);
   parameter real NSUB=0 from [0:inf)
                   (*info="Channel doping [cm^-3]"*);
   parameter real VFB=1001.0 from (-inf:inf)        
                   (*info="Flat-band voltage [V]"*);
   parameter real UO=0 from [0:inf) 
                   (*info="Low-field mobility [cm^2/Vs]"*);
   parameter real VMAX=0 from [0:inf) 
                   (*info="Saturation velocity [m/s]"*);
   parameter real THETA=0 from [0:inf) 
                   (*info="Mobility reduction coefficient [V^-1]"*);
   
   
   parameter real COX=((TOX>0) ? (  8.854187817e-12*3.9/TOX) : 0.7m) from [0:inf) 
                   (*info="Oxide capacitance [F/m^2]"*);
   parameter real XJ=0.1u from [1n:inf) 
                   (*info="Junction depth [m]"*);
   parameter real DL=0    from (-inf:inf) 
                   (*info="Length correction [m]"*);
   parameter real DW=0    from (-inf:inf) 
                   (*info="Width correction [m]"*);
   
   
   parameter real GAMMA=((NSUB>0) ? (sqrt(2* 1.602176462e-19*  8.854187817e-12*11.7*NSUB*1e6)/COX) : 1) from [0:inf) 
                   (*info="Body effect parameter [V^0.5]"*);
   parameter real PHI=((NSUB>0) ? (2* ( 1.3806503e-23*(TNOM+273.15)/ 1.602176462e-19)*ln(max(NSUB,1)*1e6/ (1.45e16*((TNOM+273.15)/ 300.15)*exp( (1.16-0.000702* (( 300.15)*( 300.15))/( 300.15+1108))/(2* ( 1.3806503e-23* 300.15/ 1.602176462e-19))- (1.16-0.000702* (((TNOM+273.15))*((TNOM+273.15)))/((TNOM+273.15)+1108))/(2* ( 1.3806503e-23*(TNOM+273.15)/ 1.602176462e-19)))))) : 0.7) from [0.1:inf) 
                   (*info="Bulk Fermi potential (*2) [V]"*);
   parameter real VTO=((VFB<1000.0) ? (VFB+MTYPE*(PHI+GAMMA*sqrt(PHI))) : 0.5) from (-inf:inf) 
                   (*info="Long-channel threshold voltage [V]"*);
   parameter real KP=((UO>0) ? (UO*1e-4*COX) : 50u) from (0:inf) 
                   (*info="Transconductance parameter [A/V^2]"*);
   parameter real UCRIT=(((VMAX>0) && (UO>0)) ? (VMAX/(UO*1e-4)) : 2e6 ) from [100k:inf) 
                   (*info="Longitudinal critical field [V/m]"*);
   parameter real E0=((THETA>0) ? 0 : 1e12) from [100k:inf) 
                   (*info="Mobility reduction coefficient [V/m]"*);
   
   
   parameter real LAMBDA=0.5 from [0:inf) 
                   (*info="Depletion length coefficient (CLM)"*);
   parameter real WETA=0.25 from (-inf:inf) 
                   (*info="Narrow-channel effect coefficient"*);
   parameter real LETA=0.1 from (-inf:inf) 
                   (*info="Short-channel effect coefficient"*);
   
   
   parameter real Q0=0 from (-inf:inf) 
                   (*info="RSCE peak charge density [C/m^2]"*);
   parameter real LK=0.29u from [10n:inf) 
                   (*info="RSCE characteristic length [m]"*);
   
   
   parameter real IBA=0 from (-inf:inf) 
                   (*info="First impact ionization coefficient [m^-1]"*);
   parameter real IBB=3e8 from [1e8:inf) 
                   (*info="Second impact ionization coefficient [V/m]"*);
   parameter real IBN=1 from [0.1:inf) 
                   (*info="Saturation voltage factor for impact ionization"*);
   
   
   parameter real TCV=1m from (-inf:inf) 
                   (*info="Threshold voltage TC [V/K]"*);
   parameter real BEX=-1.5 from (-inf:inf)
                   (*info="Mobility temperature exponent"*);
   parameter real UCEX=0.8 from (-inf:inf) 
                   (*info="Longitudinal critical field temperature exponent"*);
   parameter real IBBT=9e-4 from (-inf:inf) 
                   (*info="Temperature coefficient for IBB [K^-1]"*);
   
   
   parameter real AVTO=0 from (-inf:inf)
                   (*info="Area related VTO mismatch parameter [Vm]"*);
   parameter real AKP=0 from (-inf:inf)
                   (*info="Area related KP mismatch parameter [m]"*);
   parameter real AGAMMA=0 from (-inf:inf) 
                   (*info="Area related GAMMA mismatch parameter [V^0.5*m]"*);
   
   
   parameter real KF=0 from [0:inf)
                   (*info="Flicker noise coefficient"*);
   parameter real AF=1 from (-inf:inf)
                   (*info="Flicker noise exponent"*);
   
   
   parameter real NQS=0 from [0:1]
                   (*info="Non-quasi-static operation switch"*);
   parameter real SATLIM=exp(4) from (0:inf) 
                   (*info="Saturation limit (if/ir)"*);
   parameter real XQC=0.4 from [0:1]
                   (*info="Charge/capacitance model selector"*);
   
   
   parameter real HDIF=0 from [0:inf) 
                   (*info="S/D diffusion length (/2) [m]"*);
   parameter real RSH=0 from [0:inf) 
                   (*info="S/D sheet resistance [ohm]"*);
   parameter real JS=0 from [0:inf) 
                   (*info="S/D junction saturation current density [A/m^2]"*);
   parameter real JSW=0 from [0:inf) 
                   (*info="S/D junction sidewall saturation current density [A/m]"*);
   parameter real XTI=0 from [0:inf) 
                   (*info="S/D diode saturation current temperature exponent"*);
   parameter real N=1 from [0.5:10]
                   (*info="S/D diode emission coefficient"*);
   parameter real CJ=0 from [0:inf)
                   (*info="S/D zero-bias junction capacitance per area [F/m^2]"*);
   parameter real CJSW=0 from [0:inf)
                   (*info="S/D zero-bias junction capacitance per perimeter [F/m]"*);
   parameter real PB=0.8 from (0:inf)
                   (*info="S/D bottom junction builtin potential [V]"*);
   parameter real PBSW=PB from (0:inf)
                   (*info="S/D sidewall junction builtin potential [V]"*);
   parameter real MJ=0.5 from (0:inf)
                   (*info="S/D bottom junction grading coefficient"*);
   parameter real MJSW=0.333 from (0:inf)
                   (*info="S/D sidewall junction grading coefficient"*);
   parameter real FC=0.5 from (0:inf)
                   (*info="S/D bottom junction forward-bias threshold"*);
   parameter real FCSW=FC from (0:inf)
                   (*info="S/D sidewall junction forward-bias threshold"*);
   parameter real CGSO=0 from [0:inf)
                   (*info="Gate-source overlap capacitance per width [F/m]"*);
   parameter real CGDO=0 from [0:inf)
                   (*info="Gate-drain overlap capacitance per width [F/m]"*);
   parameter real CGBO=0 from [0:inf)
                   (*info="Gate-bulk overlap capacitance per length [F/m]"*);


   

   
   parameter real L=10u from [0:inf] 
                   (*type="instance" info="Drawn length [m]" unit="m"*);
   parameter real W=10u from [0:inf] 
                   (*type="instance" info="Drawn width [m]" unit="m"*);
   parameter real M=1   from [0:inf] 
                   (*type="instance" info="Parallel multiplier" unit="m"*);



   
   parameter real AD=((HDIF>0) ? (2*HDIF*W) : 0) from [0:inf) 
                   (*info="Drain area [m^2]" type="instance"*);
   parameter real AS=((HDIF>0) ? (2*HDIF*W) : 0) from [0:inf) 
                   (*info="Source area [m^2]" type="instance"*);
   parameter real PD=((HDIF>0) ? (4*HDIF+2*W) : 0) from [0:inf) 
                   (*info="Drain perimeter [m]" type="instance"*);
   parameter real PS=((HDIF>0) ? (4*HDIF+2*W) : 0) from [0:inf) 
                   (*info="Source perimeter [m]" type="instance"*);
   parameter real NRD=((HDIF>0) ? (HDIF/W) : 0) from [0:inf)
                   (*info="Drain no. squares" type="instance"*);
   parameter real NRS=((HDIF>0) ? (HDIF/W) : 0) from [0:inf)
                   (*info="Source no. squares" type="instance"*);
   parameter real RS=((RSH>0) ? (RSH*NRS) : 0) from [0:inf)
                   (*info="Source resistance [ohms]" type="instance"*);
   parameter real RD=((RSH>0) ? (RSH*NRD) : 0) from [0:inf)
                   (*info="Drain resistance [ohms]" type="instance"*);


   
   integer  mode;
   real     lc,isat_s,vexp_s,gexp_s,isat_d,vexp_d,gexp_d,fact,
            weff,leff,np,ns,lmin,rd,rs,ceps,ca,xsi,dvrsce,
            tempk,vt,sqrt_A,vto_a,kp_a,gamma_a,ucrit,phi,ibb,vc,qb0,
            vg,vd,vs,tmp,vgprime,vp0,vsprime,vdprime,gamma0,gammaprime,vp,n,ifwd,
            vdss,vdssprime,dv,vds,vip,dl,lprime,leq,irprime,irev,beta0,nau,
            nq,xf,xr,qd,qs,qi,qb,qg,beta0prime,beta,vpprime,is,ids,vib,
            idb,ibdj,ibsj,coxt,qdt,qst,qgt,qbt,
            cbs0,cbs0sw,cbs,cbd0,cbd0sw,cbd,
            fv,z0,z1,y;

   real     cgso,cgdo,cgbo;
   

   analog begin

       @(initial_model) begin      

         lc = sqrt(  8.854187817e-12*11.7/COX*XJ);
         
      end 

       @(initial_instance) begin 

         weff = W+DW;
         leff = L+DL;

         np = M;
         ns = 1;

         
         lmin = 0.1*ns*leff;
         
         rs = ns/np*RS;
         rd = ns/np*RD;

         ceps = 4*22e-3*22e-3;
         ca = 0.028;
         xsi = ca*(10*leff/LK-1);
         dvrsce = 2*Q0/COX/ ((1+0.5*(xsi+sqrt(xsi*xsi+ceps)))*(1+0.5*(xsi+sqrt(xsi*xsi+ceps))));

         coxt = np*ns*COX*weff*leff;
         
      end 
      
       @(initial_instance) begin 
         tempk = $temperature;
         vt =  ( 1.3806503e-23*tempk/ 1.602176462e-19);
         
         sqrt_A = sqrt(np*weff*ns*leff);
         
         vto_a   = MTYPE*(VTO+TCV*(tempk-(TNOM+273.15)))+AVTO/sqrt_A;
         kp_a    = KP*pow(tempk/(TNOM+273.15),BEX)*(1+AKP/sqrt_A);
         gamma_a = GAMMA+AGAMMA/sqrt_A;
         ucrit   = UCRIT*pow(tempk/(TNOM+273.15),UCEX);
         phi     = PHI*tempk/(TNOM+273.15)-3*vt*ln(tempk/(TNOM+273.15))- (1.16-0.000702* ((TNOM+273.15)*(TNOM+273.15))/(TNOM+273.15+1108))*tempk/(TNOM+273.15)+ (1.16-0.000702* ((tempk)*(tempk))/(tempk+1108));
         ibb     = IBB*(1+IBBT*(tempk-(TNOM+273.15)));

         vc = ucrit*ns*leff;
         
         
         qb0 = gamma_a*sqrt(phi);

         fact = ( (1.16-0.000702* ((TNOM+273.15)*(TNOM+273.15))/(TNOM+273.15+1108))/ ( 1.3806503e-23*TNOM+273.15/ 1.602176462e-19)- (1.16-0.000702* ((tempk)*(tempk))/(tempk+1108))/vt) * pow(tempk/(TNOM+273.15),XTI);
          if (abs(fact) <  2.3025850929940458e+02) begin    tmp       = exp(fact); end else begin     if ((fact) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - (fact)) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - (fact)) * (1.0 + (- 2.3025850929940458e+02 - (fact)) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + ((fact) -  2.3025850929940458e+02) * (1.0 + 0.5 * (((fact) -  2.3025850929940458e+02) * (1.0 + ((fact) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end;
         isat_s = np*ns*(JS*AS+JSW*PS)*tmp;
         isat_d = np*ns*(JS*AD+JSW*PD)*tmp;

         if (isat_s>0) begin
            vexp_s = vt*ln(IMAX/isat_s+1);
            gexp_s = (IMAX+isat_s)/vt;
         end else begin
            vexp_s = -1e9;
            gexp_s = 0;
         end

         if (isat_d>0) begin
            vexp_d = vt*ln(IMAX/isat_d+1);
            gexp_d = (IMAX+isat_d)/vt;
         end else begin
            vexp_d = -1e9;
            gexp_d = 0;
         end
         
         cbs0 = np*ns*CJ*AS;
         cbd0 = np*ns*CJ*AD;
         cbs0sw = np*ns*CJSW*PS;
         cbd0sw = np*ns*CJSW*PD;

         cgso = np*ns*CGSO*weff;
         cgdo = np*ns*CGDO*weff;
         cgbo = np*ns*CGBO*leff;
         
      end 

      
      begin     

         vg = MTYPE*V(g,b);
         vd = MTYPE*V(di,b);
         vs = MTYPE*V(si,b);
         
         
         if (vd>=vs)
            mode = 1;
         else begin
            mode = -1;
            tmp = vs;
            vs = vd;
            vd = tmp;
         end

         
         vgprime = vg-vto_a-dvrsce+phi+gamma_a*sqrt(phi);
         
         vsprime = 0.5*(vs+phi+sqrt( ((vs+phi)*(vs+phi))+16* ((vt)*(vt))));
         vdprime = 0.5*(vd+phi+sqrt( ((vd+phi)*(vd+phi))+16* ((vt)*(vt))));
         
         
         if (vgprime>=0) begin
            vp0 = vgprime-phi-gamma_a*(sqrt(vgprime+0.25* ((gamma_a)*(gamma_a)))-0.5*gamma_a);
            
            gamma0 = gamma_a-  8.854187817e-12*11.7/COX*(LETA/leff*(sqrt(vsprime)+sqrt(vdprime))-3*WETA/weff*sqrt(vp0+phi));
         end else begin
            vp0 = -phi;
            
            gamma0 = gamma_a-  8.854187817e-12*11.7/COX*(LETA/leff*(sqrt(vsprime)+sqrt(vdprime))  );
         end
         
         gammaprime = 0.5*(gamma0+sqrt( ((gamma0)*(gamma0))+0.1*vt));
         
         if (vgprime>=0)
           vp = vgprime-phi-gammaprime*(sqrt(vgprime+0.25* ((gammaprime)*(gammaprime)))-0.5*gammaprime);
         else
           vp = -phi;
         
         
         n = 1+gamma_a*0.5/sqrt(vp+phi+4*vt);

	 
   	 fv=(vp-vs)/vt;
	 
     	 if (fv > -0.35) begin
           z0 = 2.0/(1.3 + fv - ln(fv+1.6));
    	   z1 = (2.0 + z0) / (1.0 + fv + ln(z0));
	   y = (1.0 + fv + ln(z1)) / (2.0 + z1);
         end
    	 else if (fv > -15) begin
	    if (abs(-fv) <  2.3025850929940458e+02) begin    tmp       = exp(-fv); end else begin     if ((-fv) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - (-fv)) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - (-fv)) * (1.0 + (- 2.3025850929940458e+02 - (-fv)) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + ((-fv) -  2.3025850929940458e+02) * (1.0 + 0.5 * (((-fv) -  2.3025850929940458e+02) * (1.0 + ((-fv) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end;
           z0 = 1.55 + tmp;
    	   z1 = (2.0 + z0) / (1.0 + fv + ln(z0));
	   y = (1.0 + fv + ln(z1)) / (2.0 + z1);
         end 
         else if (fv > -23.0) begin
	    if (abs(-fv) <  2.3025850929940458e+02) begin    tmp       = exp(-fv); end else begin     if ((-fv) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - (-fv)) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - (-fv)) * (1.0 + (- 2.3025850929940458e+02 - (-fv)) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + ((-fv) -  2.3025850929940458e+02) * (1.0 + 0.5 * (((-fv) -  2.3025850929940458e+02) * (1.0 + ((-fv) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end;
	   y = 1.0 / (2.0 + tmp);
         end
   	 else begin
 	    if (abs(fv) <  2.3025850929940458e+02) begin    tmp       = exp(fv); end else begin     if ((fv) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - (fv)) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - (fv)) * (1.0 + (- 2.3025850929940458e+02 - (fv)) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + ((fv) -  2.3025850929940458e+02) * (1.0 + 0.5 * (((fv) -  2.3025850929940458e+02) * (1.0 + ((fv) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end;
	   y = tmp + 1.0e-64;
	 end
	 
   	 ifwd = y*(1.0 + y);
   	 z0  = 1;
   	 z1  = 1;
         
         
         vdss = vc*(sqrt(0.25+vt/vc*sqrt(ifwd))-0.5);
         
         vdssprime = vc*(sqrt(0.25+vt/vc*(sqrt(ifwd)-0.75*ln(ifwd)))-0.5)+vt*(ln(0.5*vc/vt)-0.6);
         
         
         dv = 4*vt*sqrt(LAMBDA*(sqrt(ifwd)-vdss/vt)+1.0/64);
         
         vds = 0.5*(vd-vs);
         
         vip = sqrt( ((vdss)*(vdss))+ ((dv)*(dv)))-sqrt( ((vds-vdss)*(vds-vdss))+ ((dv)*(dv)));
         
         dl = LAMBDA*lc*ln(1+(vds-vip)/(lc*ucrit));

         
         lprime = ns*leff-dl+(vds+vip)/ucrit;
         
         leq = 0.5*(lprime+sqrt( ((lprime)*(lprime))+ ((lmin)*(lmin))));

         
   	 fv=(vp-vds-vs-sqrt( ((vdssprime)*(vdssprime))+ ((dv)*(dv)))+sqrt( ((vds-vdssprime)*(vds-vdssprime))+ ((dv)*(dv))))/vt;
	 
     	 if (fv > -0.35) begin
           z0 = 2.0/(1.3 + fv - ln(fv+1.6));
    	   z1 = (2.0 + z0) / (1.0 + fv + ln(z0));
	   y = (1.0 + fv + ln(z1)) / (2.0 + z1);
         end
    	 else if (fv > -15) begin
	    if (abs(-fv) <  2.3025850929940458e+02) begin    tmp       = exp(-fv); end else begin     if ((-fv) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - (-fv)) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - (-fv)) * (1.0 + (- 2.3025850929940458e+02 - (-fv)) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + ((-fv) -  2.3025850929940458e+02) * (1.0 + 0.5 * (((-fv) -  2.3025850929940458e+02) * (1.0 + ((-fv) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end;
           z0 = 1.55 + tmp;
    	   z1 = (2.0 + z0) / (1.0 + fv + ln(z0));
	   y = (1.0 + fv + ln(z1)) / (2.0 + z1);
         end 
         else if (fv > -23.0) begin
	    if (abs(-fv) <  2.3025850929940458e+02) begin    tmp       = exp(-fv); end else begin     if ((-fv) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - (-fv)) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - (-fv)) * (1.0 + (- 2.3025850929940458e+02 - (-fv)) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + ((-fv) -  2.3025850929940458e+02) * (1.0 + 0.5 * (((-fv) -  2.3025850929940458e+02) * (1.0 + ((-fv) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end;
	   y = 1.0 / (2.0 + tmp);
         end
   	 else begin
 	    if (abs(fv) <  2.3025850929940458e+02) begin    tmp       = exp(fv); end else begin     if ((fv) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - (fv)) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - (fv)) * (1.0 + (- 2.3025850929940458e+02 - (fv)) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + ((fv) -  2.3025850929940458e+02) * (1.0 + 0.5 * (((fv) -  2.3025850929940458e+02) * (1.0 + ((fv) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end;
	   y = tmp + 1.0e-64;
	 end
	 
   	 irprime = y*(1.0 + y);
   	 z0  = 1;
   	 z1  = 1;

         
   	 fv=(vp-vd)/vt;
	 
     	 if (fv > -0.35) begin
           z0 = 2.0/(1.3 + fv - ln(fv+1.6));
    	   z1 = (2.0 + z0) / (1.0 + fv + ln(z0));
	   y = (1.0 + fv + ln(z1)) / (2.0 + z1);
         end
    	 else if (fv > -15) begin
	    if (abs(-fv) <  2.3025850929940458e+02) begin    tmp       = exp(-fv); end else begin     if ((-fv) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - (-fv)) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - (-fv)) * (1.0 + (- 2.3025850929940458e+02 - (-fv)) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + ((-fv) -  2.3025850929940458e+02) * (1.0 + 0.5 * (((-fv) -  2.3025850929940458e+02) * (1.0 + ((-fv) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end;
           z0 = 1.55 + tmp;
    	   z1 = (2.0 + z0) / (1.0 + fv + ln(z0));
	   y = (1.0 + fv + ln(z1)) / (2.0 + z1);
         end 
         else if (fv > -23.0) begin
	    if (abs(-fv) <  2.3025850929940458e+02) begin    tmp       = exp(-fv); end else begin     if ((-fv) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - (-fv)) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - (-fv)) * (1.0 + (- 2.3025850929940458e+02 - (-fv)) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + ((-fv) -  2.3025850929940458e+02) * (1.0 + 0.5 * (((-fv) -  2.3025850929940458e+02) * (1.0 + ((-fv) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end;
	   y = 1.0 / (2.0 + tmp);
         end
   	 else begin
 	    if (abs(fv) <  2.3025850929940458e+02) begin    tmp       = exp(fv); end else begin     if ((fv) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - (fv)) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - (fv)) * (1.0 + (- 2.3025850929940458e+02 - (fv)) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + ((fv) -  2.3025850929940458e+02) * (1.0 + 0.5 * (((fv) -  2.3025850929940458e+02) * (1.0 + ((fv) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end;
	   y = tmp + 1.0e-64;
	 end
	 
   	 irev = y*(1.0 + y);

         
         beta0 = kp_a*np*weff/leq;
         
         nau = (5+MTYPE)/12.0;

         
         nq = 1+0.5*gamma_a/sqrt(vp+phi+1e-6);
         
         
         xf = sqrt(0.25+ifwd);
         
         xr = sqrt(0.25+irev);
         
         qd = -nq*(4.0/15*(3* ((xr)*(xr))*(xr+2*xf)+2* ((xf)*(xf))*(xf+2*xr))/ ((xf+xr)*(xf+xr))-0.5);
         
         qs = -nq*(4.0/15*(3* ((xf)*(xf))*(xf+2*xr)+2* ((xr)*(xr))*(xr+2*xf))/ ((xf+xr)*(xf+xr))-0.5);
         
         qi = qs+qd;
         
         if (vgprime>=0)
           qb = (-gamma_a*sqrt(vp+phi+1e-6))/vt-(nq-1)/nq*qi;
         else
           qb = -vgprime/vt;
         
         qg = -qi-qb;

         if (E0!=0) begin 
           
           beta0prime = beta0*(1+COX/(E0*  8.854187817e-12*11.7)*qb0);
           
           beta = beta0prime/(1+COX/(E0*  8.854187817e-12*11.7)*vt*abs(qb+nau*qi));
         end else begin
            
            vpprime = 0.5*(vp+sqrt( ((vp)*(vp))+2* ((vt)*(vt))));
            
            beta = beta0/(1+THETA*vpprime);
         end 
         
         is = 2*n*beta* ((vt)*(vt));
         
         
         ids = is*(ifwd-irprime);
         
         vib = vd-vs-IBN*2*vdss;
         
         if (vib>0) begin
            if (abs((-ibb*lc)/vib) <  2.3025850929940458e+02) begin    tmp       = exp((-ibb*lc)/vib); end else begin     if (((-ibb*lc)/vib) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - ((-ibb*lc)/vib)) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - ((-ibb*lc)/vib)) * (1.0 + (- 2.3025850929940458e+02 - ((-ibb*lc)/vib)) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + (((-ibb*lc)/vib) -  2.3025850929940458e+02) * (1.0 + 0.5 * ((((-ibb*lc)/vib) -  2.3025850929940458e+02) * (1.0 + (((-ibb*lc)/vib) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end
           idb = ids*IBA/ibb*vib*tmp;
         end else
           idb = 0;
         

         if (mode>1) begin
            if (isat_s>0) begin
               if (-vs>vexp_s)
                 ibsj = IMAX+gexp_s*(-vs-vexp_s);
               else begin
                  if (abs(-vs/(N*vt)) <  2.3025850929940458e+02) begin    tmp       = exp(-vs/(N*vt)); end else begin     if ((-vs/(N*vt)) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - (-vs/(N*vt))) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - (-vs/(N*vt))) * (1.0 + (- 2.3025850929940458e+02 - (-vs/(N*vt))) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + ((-vs/(N*vt)) -  2.3025850929940458e+02) * (1.0 + 0.5 * (((-vs/(N*vt)) -  2.3025850929940458e+02) * (1.0 + ((-vs/(N*vt)) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end;
                 ibsj = isat_s*(tmp-1);
               end
            end else
              ibsj = 0;
            
            if (isat_d>0) begin
               if (-vd>vexp_d)
                 ibdj = IMAX+gexp_d*(-vd-vexp_d);
               else begin
                  if (abs(-vd/(N*vt)) <  2.3025850929940458e+02) begin    tmp       = exp(-vd/(N*vt)); end else begin     if ((-vd/(N*vt)) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - (-vd/(N*vt))) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - (-vd/(N*vt))) * (1.0 + (- 2.3025850929940458e+02 - (-vd/(N*vt))) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + ((-vd/(N*vt)) -  2.3025850929940458e+02) * (1.0 + 0.5 * (((-vd/(N*vt)) -  2.3025850929940458e+02) * (1.0 + ((-vd/(N*vt)) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end;
                 ibdj = isat_d*(tmp-1);
               end
            end else
              ibdj = 0;
            
         end else begin 
            if (isat_s>0) begin
               if (-vd>vexp_s)
                 ibsj = IMAX+gexp_s*(-vd-vexp_s);
               else begin
                  if (abs(-vd/(N*vt)) <  2.3025850929940458e+02) begin    tmp       = exp(-vd/(N*vt)); end else begin     if ((-vd/(N*vt)) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - (-vd/(N*vt))) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - (-vd/(N*vt))) * (1.0 + (- 2.3025850929940458e+02 - (-vd/(N*vt))) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + ((-vd/(N*vt)) -  2.3025850929940458e+02) * (1.0 + 0.5 * (((-vd/(N*vt)) -  2.3025850929940458e+02) * (1.0 + ((-vd/(N*vt)) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end;
                 ibsj = isat_s*(tmp-1);
               end
            end else
              ibsj = 0;
            
            if (isat_d>0) begin
               if (-vs>vexp_d)
                 ibdj = IMAX+gexp_d*(-vs-vexp_d);
               else begin
                  if (abs(-vs/(N*vt)) <  2.3025850929940458e+02) begin    tmp       = exp(-vs/(N*vt)); end else begin     if ((-vs/(N*vt)) < - 2.3025850929940458e+02) begin        tmp       =  1.0e-100 /  (1.0 + (- 2.3025850929940458e+02 - (-vs/(N*vt))) * (1.0 + 0.5 * ((- 2.3025850929940458e+02 - (-vs/(N*vt))) * (1.0 + (- 2.3025850929940458e+02 - (-vs/(N*vt))) *  3.3333333333333333e-01))));     end else begin        tmp       =   1.0e100 *  (1.0 + ((-vs/(N*vt)) -  2.3025850929940458e+02) * (1.0 + 0.5 * (((-vs/(N*vt)) -  2.3025850929940458e+02) * (1.0 + ((-vs/(N*vt)) -  2.3025850929940458e+02) *  3.3333333333333333e-01))));     end end;
                 ibdj = isat_d*(tmp-1);
               end
            end else
              ibdj = 0;
            
         end 

         qdt = coxt*vt*qd;
         qst = coxt*vt*qs;
         qgt = coxt*vt*qg;
         qbt = coxt*vt*qb;

         cbs = 0;
         cbd = 0;
         
         if (cbs0>0) begin
            if (MTYPE*V(b,si)>FC*PB)
              cbs = cbs+cbs0/pow(1-FC,MJ)*(1+MJ*(MTYPE*V(b,si)-PB*FC))/(PB*(1-FC));
            else
              cbs = cbs+cbs0/pow(1-MTYPE*V(b,si),MJ);
         end
         if (cbd0>0) begin
            if (MTYPE*V(b,di)>FC*PB)
              cbd = cbd+cbd0/pow(1-FC,MJ)*(1+MJ*(MTYPE*V(b,di)-PB*FC))/(PB*(1-FC));
            else
              cbd = cbd+cbd0/pow(1-MTYPE*V(b,di),MJ);
         end
         if (cbs0sw>0) begin
            if (MTYPE*V(b,si)>FCSW*PBSW)
              cbs = cbs+cbs0sw/pow(1-FCSW,MJSW)*(1+MJSW*(MTYPE*V(b,si)-PBSW*FCSW))/(PBSW*(1-FCSW));
            else
              cbs = cbs+cbs0sw/pow(1-MTYPE*V(b,si),MJSW);
         end
         if (cbd0sw>0) begin
            if (MTYPE*V(b,di)>FCSW*PBSW)
              cbd = cbd+cbd0sw/pow(1-FCSW,MJSW)*(1+MJSW*(MTYPE*V(b,di)-PBSW*FCSW))/(PBSW*(1-FCSW));
            else
              cbd = cbd+cbd0sw/pow(1-MTYPE*V(b,di),MJSW);
         end
         
      end       

      begin     

         I(di,si) <+ MTYPE*mode*ids;
         if (mode>0) begin
            I(di,b) <+ MTYPE*idb;

            I(di,g) <+ MTYPE*ddt(qdt);
            I(si,g) <+ MTYPE*ddt(qst);
            
         end else begin
            I(si,b) <+ MTYPE*idb;

            I(si,g) <+ MTYPE*ddt(qdt);
            I(di,g) <+ MTYPE*ddt(qst);
            
         end 

         I(b,si) <+ MTYPE*ibsj;
         I(b,di) <+ MTYPE*ibdj;
         
         I(b,g)  <+ MTYPE*ddt(qbt);
         
         I(g,si) <+ cgso*ddt(V(g,si));
         I(g,di) <+ cgdo*ddt(V(g,di));
         I(g,b)  <+ cgbo*ddt(V(g,b));
         
         if (RD>0)
           I(d,di) <+ V(d,di)/rd;
         else   
           V(d,di) <+ 0.0;
         if (RS>0)
           I(s,si) <+ V(s,si)/rs;
         else
           V(s,si) <+ 0.0;

         I(b,si) <+ cbs*ddt(V(b,si));
         I(b,di) <+ cbd*ddt(V(b,di));
         
      end 




      
   end 

endmodule
